name: üö• Status Checks
on: push

jobs:
  tests:
    name: üëÄ Evaluate on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      # Don't cancel other OS runners if one fails.
      fail-fast: false
      matrix:
        # Put the operating systems you want to run on here.
        os: [windows-latest]
    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: true
      DOTNET_NOLOGO: true
    defaults:
      run:
        # Use bash shells on all platforms.
        shell: bash
    steps:
      - uses: actions/checkout@v4
        name: üßæ Checkout

      - name: Get version tag
        uses: michpohl/action-concatenate-strings@v1.0.1
        with:
          first: "internal-fallback-"
          second: ${{ github.run_number }}
          separator: '-'
          output-var-name: 'VERSION_NAME_STRING'

      - uses: actions/setup-dotnet@v3
        name: üíΩ Setup .NET SDK
        with:
          # Use the .NET SDK from global.json in the root of the repository.
          global-json-file: global.json

      - name: üì¶ Restore Dependencies
        run: dotnet restore

      - uses: chickensoft-games/setup-godot@v1
        name: ü§ñ Setup Godot
        with:
          # Version must include major, minor, and patch, and be >= 4.0.0
          # Pre-release label is optional.
          version: 4.3.0 # also valid: 4.0.0.rc1 or 4.0.0, etc
          # Use .NET-enabled version of Godot (the default is also true).
          use-dotnet: true
          # Include the Godot Export Templtes (the default is false).
          include-templates: true

      - name: üî¨ Verify Setup
        run: |
          dotnet --version
          godot --version

      - name: Import assets
        run: godot --headless --import

      - name: üßë‚Äçüî¨ Generate .NET Bindings
        run: godot --headless --build-solutions --quit || exit 0

      - name: ü¶∫ Build Projects
        run: dotnet build

      - name: Made directory
        run: 
          mkdir -p ./mygithub/build

      - name: Build godot
        run:
          godot --headless --verbose --export-release "Windows64" ./mygithub/build/destination

      - name: Zip release
        uses: montudor/action-zip@v1
        with:
          args: zip -qq -r Windows64.zip ./mygithub/build/destination

      - name: create release
        uses: ncipollo/release-action@v1.13.0
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          generateReleaseNotes: false
          tag: ${{ env.VERSION_NAME_STRING }}
          artifacts: ./mygithub/build/Windows64.zip # Added "/*" at the end is glob pattern match for this action

